# This file is part of the tschm/.config-templates repository
# (https://github.com/tschm/.config-templates).
#
# Manual Release Workflow for Python Package using Hatch and
# Trusted Publisher (OIDC)
#
# This workflow implements a secure, maintainable release pipeline
# by separating concerns:
#   - 🔖 Tagging the release (Git tag)
#   - 🏗️ Building the package with Hatch
#   - 🚀 Publishing to PyPI using OIDC (no passwords or secrets)
#
# 🔐 Security:
#   - No PyPI credentials are stored; relies on Trusted Publishing via GitHub OIDC.
#
# 📄 Requirements:
#   - `pyproject.toml` with a top-level `version = "..."`
#   - Package is registered on PyPI as a Trusted Publisher with this repository
#
# ✅ To trigger:
#   - Go to the "Actions" tab
#   - Run this workflow manually with a tag input like `v1.2.3`

name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.2.3)'
        required: true
        type: string

permissions:
  contents: write  # Needed to create releases
  id-token: write  # Needed for OIDC authentication with PyPI

jobs:
  tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Git Tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}

  build:
    name: Build with Hatch
    runs-on: ubuntu-latest
    needs: tag
    outputs:
      built: ${{ steps.set_output.outputs.built }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if pyproject.toml exists
        id: check_file
        run: |
          if [ -f "pyproject.toml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        if: steps.check_file.outputs.exists == 'true'
        uses: actions/setup-python@v5
        with:
            python-version: '3.13'

      - name: Install Hatch
        if: steps.check_file.outputs.exists == 'true'
        run: |
          pip install --upgrade pip
          pip install hatch

      - name: Set version from tag in pyproject.toml
        if: steps.check_file.outputs.exists == 'true'
        run: |
          version=${{ github.event.inputs.tag }}
          version=${version#v}
          echo "Setting version to $version"
          sed -i.bak "s/^version = .*/version = \"$version\"/" pyproject.toml
          rm pyproject.toml.bak

      - name: Build Package
        if: steps.check_file.outputs.exists == 'true'
        run: hatch build

      - name: Upload dist/
        if: steps.check_file.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set build output
        id: set_output
        run: |
          echo "built=${{ steps.check_file.outputs.exists }}" >> $GITHUB_OUTPUT


  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [tag, build]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download dist artifact (if any)
        if: needs.build.outputs.built == 'true'
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Create GitHub Release with artifacts
        if: needs.build.outputs.built == 'true'
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: ${{ github.event.inputs.tag }}
          generate_release_notes: true
          files: dist/*

      - name: Create GitHub Release without artifacts
        if: needs.build.outputs.built == 'false'
        uses: softprops/action-gh-release@v2.3.2
        with:
          tag_name: ${{ github.event.inputs.tag }}
          name: ${{ github.event.inputs.tag }}
          generate_release_notes: true

  pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment: release
    needs: [build, tag]
    if: needs.build.outputs.built == 'true'

    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true
