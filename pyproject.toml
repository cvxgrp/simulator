# Project metadata and core configuration
[project]
name = "cvxsimulator"
version = "0.0.0"
description = "Simple simulator for investors"
authors = [{name = "Thomas Schmelzer", email = "thomas.schmelzer@gmail.com"}]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "jquantstats>=0.0.23",
    "numpy>=2.0",
    "pandas>=2.2.3",
    "polars>=1.24.0"
]

# Links to project resources
[project.urls]
repository = "https://github.com/cvxgrp/simulator"

# Additional dependencies for development, testing, and documentation
[project.optional-dependencies]
dev = [
    "cvxpy-base>=1.5.1",
    "pytest-cov>=6.0.0",
    "pytest>=8.3.3",
    "pre-commit>=4.0.1",
    "clarabel>=0.9.0",
    "loguru",
    "tinycta",
    "marimo>=0.13.15",
    "python-dotenv==1.1.1"
]

# Configuration for Ruff, a fast Python linter and code formatter
[tool.ruff]
line-length = 120
target-version = "py310"
exclude = [
    "src/cvxsimulator/__init__.py"
]

# Linting rules configuration
[tool.ruff.lint]
# Available rule sets in Ruff:
# A: flake8-builtins - Check for python builtins being used as variables or parameters
# B: flake8-bugbear - Find likely bugs and design problems
# C4: flake8-comprehensions - Helps write better list/set/dict comprehensions
# D: pydocstyle - Check docstring style
# E: pycodestyle errors - PEP 8 style guide
# ERA: eradicate - Find commented out code
# F: pyflakes - Detect logical errors
# I: isort - Sort imports
# N: pep8-naming - Check PEP 8 naming conventions
# PT: flake8-pytest-style - Check pytest best practices
# RUF: Ruff-specific rules
# S: flake8-bandit - Find security issues
# SIM: flake8-simplify - Simplify code
# T10: flake8-debugger - Check for debugger imports and calls
# UP: pyupgrade - Upgrade syntax for newer Python
# W: pycodestyle warnings - PEP 8 style guide warnings
# ANN: flake8-annotations - Type annotation checks
# ARG: flake8-unused-arguments - Unused arguments
# BLE: flake8-blind-except - Check for blind except statements
# COM: flake8-commas - Trailing comma enforcement
# DTZ: flake8-datetimez - Ensure timezone-aware datetime objects
# EM: flake8-errmsg - Check error message strings
# FBT: flake8-boolean-trap - Boolean argument checks
# ICN: flake8-import-conventions - Import convention enforcement
# ISC: flake8-implicit-str-concat - Implicit string concatenation
# NPY: NumPy-specific rules
# PD: pandas-specific rules
# PGH: pygrep-hooks - Grep-based checks
# PIE: flake8-pie - Miscellaneous rules
# PL: Pylint rules
# Q: flake8-quotes - Quotation style enforcement
# RSE: flake8-raise - Raise statement checks
# RET: flake8-return - Return statement checks
# SLF: flake8-self - Check for self references
# TCH: flake8-type-checking - Type checking imports
# TID: flake8-tidy-imports - Import tidying
# TRY: flake8-try-except-raise - Try/except/raise checks
# YTT: flake8-2020 - Python 2020+ compatibility

# Current configuration:
select = ["E", "F", "I", "N", "D", "UP", "NPY", "PD", "C4", "B", "S", "W"]

# Per-file rule ignores
[tool.ruff.lint.per-file-ignores]
"src/tests/**/*.py" = ["S101"]  # Allow assert statements in tests
"book/marimo/*.py" = ["N803", "S101"]

# Build system configuration
# Hatchling is a modern, extensible Python build backend
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Configuration for building wheel distributions
# Specifies which packages to include in the wheel
[tool.hatch.build.targets.wheel]
packages = ["src/cvxsimulator"]

# Deptry configuration for dependency checking
# Specific rule ignores for dependency checking
[tool.deptry.per_rule_ignores]
DEP002 = ["jquantstats"]

# General Deptry configuration
# Deptry is a tool for checking dependency usage in Python projects
[tool.deptry]
# see https://deptry.com/usage/#pep-621-dev-dependency-groups
pep621_dev_dependency_groups = ["dev"]
